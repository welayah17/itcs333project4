// Noor Ahmed -202004468
// course-notes.js

const notesList = document.querySelector('.grid');
const loadingIndicator = document.createElement('div');
loadingIndicator.textContent = 'Loading...';
loadingIndicator.className = 'loading-indicator';
loadingIndicator.style.display = 'none';
document.body.appendChild(loadingIndicator);

let allNotes = [];
const notesPerPage = 5;
let currentPage = 1;

// Fetch notes from API
async function fetchCourseNotes() {
loadingIndicator.style.display = 'block';
try {
const response = await fetch('https://api.example.com/course-notes'); // Replace with your actual API
if (!response.ok) throw new Error('Network response was not ok');
allNotes = await response.json();
paginateNotes(allNotes);
} catch (error) {
console.error('Fetch error:', error);
alert('Failed to load course notes. Please try again later.');
} finally {
loadingIndicator.style.display = 'none';
}
}

// Paginate and render notes
function paginateNotes(notes) {
const totalPages = Math.ceil(notes.length / notesPerPage);
const start = (currentPage - 1) * notesPerPage;
const end = start + notesPerPage;
const paginatedNotes = notes.slice(start, end);
renderNotes(paginatedNotes);
renderPagination(totalPages);
}

// Render notes list
function renderNotes(notes) {
notesList.innerHTML = '';
if (notes.length === 0) {
notesList.innerHTML = '<p>No notes found.</p>';
return;
}
notes.forEach(note => {
const article = document.createElement('article');
article.className = 'card';
article.innerHTML = `
<h3>${note.title}</h3>
<p>${note.description}</p>
<a href="#" class="view-button" onclick="showNoteDetail(${note.id})">View Details</a>
`;
notesList.appendChild(article);
});
}

// Render pagination links
function renderPagination(totalPages) {
const pagination = document.querySelector('.pagination');
pagination.innerHTML = '';
for (let i = 1; i <= totalPages; i++) {
const button = document.createElement('a');
button.textContent = i;
button.href = '#';
button.onclick = (e) => {
e.preventDefault();
currentPage = i;
paginateNotes(allNotes);
};
pagination.appendChild(button);
}
}

// Show detail view of note
function showNoteDetail(noteId) {
const note = allNotes.find(n => n.id === noteId);
if (note) {
const detailView = document.getElementById('detail-view');
detailView.querySelector('h2').textContent = note.title;
detailView.querySelector('p').textContent = note.content;
detailView.style.display = 'block';
document.getElementById('listing').style.display = 'none';
}
}

// Search by title
const searchInput = document.getElementById('search');
searchInput.addEventListener('input', (e) => {
const filter = e.target.value.toLowerCase();
const filteredNotes = allNotes.filter(note => note.title.toLowerCase().includes(filter));
paginateNotes(filteredNotes);
});

// Filter by category
const filterSelect = document.getElementById('filter');
filterSelect.addEventListener('change', (e) => {
const selected = e.target.value.toLowerCase();
const filtered = allNotes.filter(note => note.category && note.category.toLowerCase() === selected);
paginateNotes(filtered);
});

// Sort by title (basic example)
const sortButton = document.querySelector('.search-bar button');
sortButton.addEventListener('click', () => {
allNotes.sort((a, b) => a.title.localeCompare(b.title));
paginateNotes(allNotes);
});

// Prevent form submission and validate
const form = document.querySelector('form');
form.addEventListener('submit', function (e) {
e.preventDefault();
const titleInput = document.getElementById('title');
const contentInput = document.getElementById('content');
if (validateForm(titleInput, contentInput)) {
alert("Form is valid! (Mock submission)");
}
});

// Form validation
function validateForm(titleInput, contentInput) {
if (titleInput.value.trim() === '') {
alert('Title is required.');
return false;
}
if (contentInput.value.trim() === '') {
alert('Content is required.');
return false;
}
return true;
}

// Run fetch on DOM load
document.addEventListener('DOMContentLoaded', fetchCourseNotes);
